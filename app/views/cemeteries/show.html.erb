<%# Kapsētas nosaukums -> applicaiton.html.erb priekš HTML title %>
<% provide(:title, @cemetery.name) %>

<%# Ekrānpoga failu eksportēšanai %>
<li><a id="export" href="#" title="Export drawn items to GeoJSON">Export</a></li>

<%# Failu moduļa ekrānpogas ikona tālākai izmantošanai skriptā %>
<% tag = image_tag("folder.svg", class: "icon", alt: "file icon") %>

<body>
  <script>
  // Leaflet prasība- kartes konfigurācija tiek sākta tikai, kad lapas ielāde pabeigta
  $(document).on('ready page:load', function(event) {

    // Mainīgo deklarācijas
    var cemeteriesLayer, plotsLayer, streetsLayer, pointsLayer, sectorsLayer, Stamen_Watercolor, baseMaps, drawControl, drawnItems, map, opencyclemap, osm, otm, overlayMaps, uploadPopup, measureControl, folderIcon, cName, cId, cAddress, cPhone_number, cCity, cRegion, cemeteryPopup;

    // Izveido kartes objektu ar skatu uz Rīgu un 13. pietuvinājuma līmeni
    map = L.map("map").setView([56.9558, 24.0991], 13);

    // Uzstāda kartes maksimālo pietuvinājumu uz 24
    map.options.maxZoom = 24;

    // Kartes pamatslāņu definīcijas
    osm = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxNativeZoom: 18,
      maxZoom: 24
    }, {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    otm = L.tileLayer('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
      maxNativeZoom: 17,
      maxZoom: 24,
      attribution: 'Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
    });

    Stamen_Watercolor = L.tileLayer('http://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.{ext}', {
      attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      maxNativeZoom: 16,
      maxZoom: 24,
      ext: 'png'
    });

    opencyclemap = L.tileLayer('http://{s}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey={apikey}', {
      maxNativeZoom: 16,
      maxZoom: 24,
      attribution: '&copy; <a href="http://www.thunderforest.com/">Thunderforest</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    });

    // Zīmēto objektu slānis tiek izveidots un pievienots kartei
    drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);

    // Kapsētas slāņu vizuālā noformējuma definīcijas
    var cemeteryStyle = {
        "fillColor": '#6c9b6b',
        "color": 'black',
        "weight": 3,
        "fillOpacity": .5
    };

    var plotStyle = {
      "weight": 1.5,
      "fillColor" : '#704827',
      "color": 'black',
      "fillOpacity": 0.8
    };

    var sectorStyle = {
      "weight": 2,
      "color": 'gray',
      "fillColor": 'light-gray',
      "fillOpacity": 0.1
    };

    var streetStyle2 = {
      "weight": 5,
      "color": 'white',
      "fillOpacity": 0.95
    };

    var streetStyle4 = {
      "weight": 4,
      "color": 'white',
      "fillOpacity": 0.95
    };

    var streetStyle5 = {
      "weight": 1.5,
      "color": 'white',
      "fillOpacity": 0.95
    };

    var streetStyle6 = {
      "weight": 1,
      "color": 'white',
      "fillOpacity": 0.95
    };

    // Skujkoka ikona
    var coniferousIcon = L.icon({
      iconUrl: '/assets/obj-icon-coniferous-tree.png',
      iconSize:     [48, 24], // ikonas izmērs
      iconAnchor:   [24, 24], // ikonas punkts, kurš tiks novietots attiecīgajās punkta koordinātās
      popupAnchor:  [0, 0], // punkts relatīvi ikonas punktam, kur tiks novietots uznirstošais logs
      opacity: 0.5 // ikonas caurspīdīgums
    });

    // Lapu koka ikona
    var deciduousIcon = L.icon({
      iconUrl: '/assets/obj-icon-deciduous-tree.png',
      iconSize:     [48, 24],
      iconAnchor:   [24, 24],
      popupAnchor:  [0, 0],
      opacity: 0.5
    });

    // Kartes ielādes laikā attēlo aplīti
    map.on('data:loading', function() {
      map.spin(true);
    });

    // AJAX pieprasījums, kas definē kapsētas slāni
    cemeteriesLayer = new L.GeoJSON.AJAX("/cemeteries/cemetery_data",{
      style: {
        "fillColor": '#6c9b6b',
        "color": 'black',
        "weight": 3,
        "fillOpacity": .5
        },
      onEachFeature: function (feature, layer) {
        cemeteryPopup = L.popup().setContent(
          "Name: " + feature.properties.name + "<br>" +
          "Address: " + feature.properties.address + "<br>" +
          "Phone number: " + feature.properties.phone_number + "<br>" +
          '<%= link_to "Link to cemety", "https://www.cemety.lv/cemeteries/#{$cem_id}" %>'
          );
      }
    }).addTo(map);

    // Sektoru slānis
    sectorsLayer = new L.GeoJSON.AJAX("/cemeteries/sectors_data",{
      style: sectorStyle,
      onEachFeature: function (feature, layer) {
        layer.bindPopup("Sector Nr: " + feature.properties.label);
      }
    }).addTo(map);

    // Kapavietu slānis
    plotsLayer = new L.GeoJSON.AJAX("/cemeteries/plots_data",{
      style: plotStyle,
      onEachFeature: function (feature, layer) {
        layer.bindPopup("Plot Nr: " + feature.properties.label);
      }
    });

    // Ielu slānis
    streetsLayer = new L.GeoJSON.AJAX("/cemeteries/streets_data", {
      style: function (feature){
        switch(feature.properties.kind){
          case '2': return streetStyle2; break;
          case '4': return streetStyle4; break;
          case '5': return streetStyle5; break;
          case '6': return streetStyle6; break;
        }
      }
    });

    // Punktu slānis
    pointsLayer = new L.GeoJSON.AJAX("/cemeteries/points_data", {
      pointToLayer: function(feature, latlng) {
        switch(feature.properties.kind){
          case 'coniferous_tree': return L.marker(latlng, {icon: coniferousIcon, opacity:0.7}); break;
          case 'deciduous_tree': return L.marker(latlng, {icon: deciduousIcon, opacity:0.7}); break;
        }
      }
    });

    // Katru reizi, kad tiek parādīts vai paslēpts kāds slānis (ne pamata), pareizi sarindo slāņus
    map.on('overlayadd', function() {
      if (map.hasLayer(drawnItems)) {
        drawnItems.bringToBack();
      }
      if (map.hasLayer(pointsLayer)) {
        pointsLayer.bringToBack();
      }
      if (map.hasLayer(plotsLayer)) {
        plotsLayer.bringToBack();
      }
      if (map.hasLayer(sectorsLayer)) {
        sectorsLayer.bringToBack();
      }
      if (map.hasLayer(streetsLayer)) {
        streetsLayer.bringToBack();
      }
      if (map.hasLayer(cemeteriesLayer)) {
        cemeteriesLayer.bringToBack();
      }
    });

    // Kartes slāņu nosaukumu sasaiste ar slāņus saturošajiem mainīgajiem
    baseMaps = {
      "OpenStreetMap": osm,
      "OpenTopoMap": otm,
      "Stamen watercolor": Stamen_Watercolor,
      "No map": opencyclemap
    };
    overlayMaps = {
      "Cemetery": cemeteriesLayer,
      "Sectors": sectorsLayer,
      "Streets": streetsLayer,
      "Plots": plotsLayer,
      "Points": pointsLayer,
      "Drawn items": drawnItems
    };

    // Pievieno kartei mērogu
    L.control.scale().addTo(map);

    // Pievieno kartei zīmēšanas kontroles
    drawControl = new L.Control.Draw({
      edit: {
        featureGroup: drawnItems
      },
      draw: {
        polygon: {
          allowIntersection: false,
          showArea: true,
          shapeOptions: {
            color: 'black',
            weight: 4
          }
        },
        showMeasurements: true,
        polyline: true,
        circle: false,
        rectangle: false,
        imperial: false,
        marker: true
      }
    }).addTo(map);

    // Kolīdz pabeigta objekta zīmēšana, pievieno to kartei kā atsevišķu slāni
    map.on('draw:created', function(e) {
      drawnItems.addLayer(e.layer);
    });

    // Atsevišķu kapsētu slāņu automātiska slēpšana, kad karte pārāk attālināta
    map.on('zoomend', function() {
      if (map.getZoom() < 19){
        if (map.hasLayer(plotsLayer)) {
          map.removeLayer(plotsLayer);
        }
      };
      if (map.getZoom() >= 19){
        if (map.hasLayer(plotsLayer)){
          console.log("plots layer already added");
        } else {
          map.addLayer(plotsLayer);
        }
      };
      if (map.getZoom() >= 18){
        if (map.hasLayer(streetsLayer)){
          console.log("streets layer already added");
        } else {
          map.addLayer(streetsLayer);
        }
      } else {
        map.removeLayer(streetsLayer);
      };
      if (map.getZoom() >= 19){
        if (map.hasLayer(pointsLayer)){
          console.log("points layer already added");
        } else {
          map.addLayer(pointsLayer);
        }
      }
      else {
        map.removeLayer(pointsLayer);
      };
    });

    // Kapsētas centrpunkta koordinātas no cemetery.rb
    var cLat = <%= Cemetery.find(params[:id]).central_coordinates[:lat] %>;
    var cLng = <%= Cemetery.find(params[:id]).central_coordinates[:lng] %>;

    // Pēc kapsētas ielādes novieto skatu tās centrā 16. pietuvinājumā
    map.setView([ cLat, cLng], 16);

    // Ekrānpoga kartes skata novietošanai uz kapsētas
    L.easyButton('fa-crosshairs', function(btn, map){
      map.setView([cLat, cLng], 16)
    }).addTo(map);

    // Ekrānpoga kartes skata pietuvināšanai līdz kapsētu līmenim
    L.easyButton('<span class="dagger">&dagger;</span>', function(btn, map){
      map.setZoom(19)
    }).addTo(map);

    // Ekrānpoga kapsētas informācijas uznirstošā loga attēlošanai
    L.easyButton('fa-info', function(btn, map){
      cemeteryPopup.setLatLng([cLat, cLng]).openOn(map);
    }).addTo(map);

    // Palīgfunkcija skaitļu apaļošanai
    var _round = function(num, len) {
        return Math.round(num*(Math.pow(10, len)))/(Math.pow(10, len));
    };

    // Palīgfunkcija, lai parādītu punkta koordinātas formātā (x.xxxxxx, y.yyyyyy)
    var strLatLng = function(latlng) {
        return "("+_round(latlng.lat, 6)+", "+_round(latlng.lng, 6)+")";
    };

    // Ģenerē uznirstošā loga saturu zīmētajiem objektiem atkarībā no objekta
    // Atgriež HTML virkni vai NULL, ja nezināms objekts
    var getPopupContent = function(layer) {
        // Punkts - koordinātas EPSG:4326
        if (layer instanceof L.Marker) {
            return strLatLng(layer.getLatLng());
        // Daudzstūris - platība kvadrātmetros un hektāros
        } else if (layer instanceof L.Polygon) {
            var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),
                area = L.GeometryUtil.geodesicArea(latlngs);
            return "Area: "+L.GeometryUtil.readableArea(area, true);
        // Līnija - attālums metros un kilometros
        } else if (layer instanceof L.Polyline) {
            var latlngs = layer._defaultShape ? layer._defaultShape() : layer.getLatLngs(),
                distance = 0;
            if (latlngs.length < 2) {
                return "Distance: N/A";
            } else {
                for (var i = 0; i < latlngs.length-1; i++) {
                    distance += latlngs[i].distanceTo(latlngs[i+1]);
                }
                return "Distance: "+_round(distance, 2)+" m";
            }
        }
        return null;
    };

    // Kad objekts izveidots, piesaista uznirstošo logu slānim
    map.on(L.Draw.Event.CREATED, function(event) {
        var layer = event.layer;
        var content = getPopupContent(layer);
        if (content !== null) {
            layer.bindPopup(content);
        }
        drawnItems.addLayer(layer);
    });

    // Kad objekts rediģēts, izmaina uznirstošā loga saturu
    map.on(L.Draw.Event.EDITED, function(event) {
        var layers = event.layers,
            content = null;
        layers.eachLayer(function(layer) {
            content = getPopupContent(layer);
            if (content !== null) {
                layer.setPopupContent(content);
            }
        });
    });

    // Zīmēto objektu eksportēšana failā
    document.getElementById('export').onclick = function(e) {
      //Iegūst GeoJSON datus
      var data = drawnItems.toGeoJSON();

      // Savirknē GeoJSON datus
      var convertedData = 'text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(data));

      // No lietotāja uzzin vēlamo faila nosaukumu
      var filename = prompt("Filename for exported geodata: ");

      if (filename) {
        // Izveido lejupielādi
        document.getElementById('export').setAttribute('href', 'data:' + convertedData);
        document.getElementById('export').setAttribute('download', filename + '.geojson');
      }
      else {
        alert("Filename can't be empty!");
      }
    }

    // Failu slāņa stils
    var fileLayerStyle = {
      "weight":1.5,
      "fillColor" :'#704827',
      "color":'black',
      "fillOpacity":0.7
    };

    // Failu moduļa konfigurācija
    folderIcon = '<%= tag %>';
    L.Control.FileLayerLoad.LABEL = folderIcon;
    var fileload = new L.Control.fileLayerLoad({
      fitBounds: true,
      formats: [
            '.geojson',
            '.kml',
            '.json'
        ],
      layerOptions: {
        style: fileLayerStyle,
        pointToLayer: function (data, latlng) {
          return L.circleMarker(
          latlng,
          { style: fileLayerStyle }
          );
        }
      }
    }).addTo(map);

    // Pievieno failu slāni slāņu izvēlnē
    fileload.loader.on('data:loaded', function (e) {
      layerswitcher.addOverlay(e.layer, e.filename);
    });
    var layerswitcher = L.control.layers(baseMaps, overlayMaps).addTo(map);

    // Alternatīvs risinājums mērīšanai
    measureControl = new L.Control.Measure({
      position: 'topright',
      primaryLengthUnit: 'meters',
      secondaryLengthUnit: 'kilometers',
      primaryAreaUnit: 'sqmeters',
      secondaryAreaUnit: 'hectares'
    }).addTo(map);

  });
  </script>
</body>

<div id="map"></div>
